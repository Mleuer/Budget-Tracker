{"version":3,"sources":["components/form.js","components/jumbotron.js","components/table.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","handleFormSubmit","className","type","onChange","handleInputChange","placeholder","Jumbotron","Table","formatExpense","expense","border","expenses","map","total","App","state","amount","event","setState","target","value","preventDefault","expenseArr","floatAmount","parseFloat","push","console","log","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qPAkBeA,MAhBf,SAAcC,GACZ,OACE,oCACE,0BAAMC,SAAUD,EAAME,kBACpB,yBAAKC,UAAU,cACb,sDACA,2BAAOC,KAAK,OAAOD,UAAU,eAAeE,SAAUL,EAAMM,kBAAmBC,YAAY,OAE7F,4BAAQH,KAAK,SAASD,UAAU,mBAAhC,aCIOK,MAZf,WACE,OACE,oCACE,yBAAKL,UAAU,6BACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,aAAd,sBCwBKM,MA7Bf,SAAeT,GAEb,IAAMU,EAAgB,SAACC,GACrB,MAAO,IAAMA,EAAU,OAGzB,OACE,oCACE,2BAAOC,OAAO,KACZ,+BACE,4BACE,0CAGJ,+BACGZ,EAAMa,SAASC,KAAI,SAACH,GAAD,OAClB,4BACE,4BAAKD,EAAcC,QAGvB,4BACA,sCAAYD,EAAcV,EAAMe,aCkB3BC,E,4MAjCbC,MAAQ,CACNJ,SAAU,GACVK,OAAQ,GACRH,MAAO,G,EAGTT,kBAAoB,SAAAa,GAClB,EAAKC,SAAL,2BAAkB,EAAKH,OAAvB,IAA8BC,OAAQC,EAAME,OAAOC,U,EAGrDpB,iBAAmB,SAAAiB,GACjBA,EAAMI,iBAEN,IAAIC,EAAa,EAAKP,MAAMJ,SACxBY,EAAcC,WAAW,EAAKT,MAAMC,QAExCM,EAAWG,KAAKF,GAChBG,QAAQC,IAAIJ,EAAa,EAAKR,MAAMF,OAEpC,EAAKK,SAAL,2BAAkB,EAAKH,OAAvB,IAA8BJ,SAAUW,EAAYT,MAAO,EAAKE,MAAMF,MAAQU,M,uDAI9E,OACE,yBAAKtB,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMG,kBAAmBwB,KAAKxB,kBAAmBJ,iBAAkB4B,KAAK5B,mBACxE,kBAAC,EAAD,CAAOW,SAAUiB,KAAKb,MAAMJ,SAAUE,MAAOe,KAAKb,MAAMF,a,GA7B9CgB,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.1a328982.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Form(props) {\n  return (\n    <>\n      <form onSubmit={props.handleFormSubmit}>\n        <div className=\"form-group\">\n          <label>Input Your Expense:</label>\n          <input type=\"text\" className=\"form-control\" onChange={props.handleInputChange} placeholder=\"$\"></input>\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary\">\n          Submit\n        </button>\n      </form>\n    </>\n  );\n}\n\nexport default Form;\n","import React from \"react\";\n\nfunction Jumbotron() {\n  return (\n    <>\n      <div className=\"jumbotron jumbotron-fluid\">\n        <div className=\"container\">\n          <h1 className=\"display-4\">Budget Tracker</h1>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\n\nfunction Table(props) {\n\n  const formatExpense = (expense) => {\n    return \"$\" + expense + \".00\";\n  }\n\n  return (\n    <>\n      <table border=\"1\">\n        <thead>\n          <tr>\n            <th>Expenses</th>\n          </tr>\n        </thead>\n        <tbody>\n          {props.expenses.map((expense) => (\n            <tr>\n              <td>{formatExpense(expense)}</td>\n            </tr>\n          ))}\n          <tr>\n          <th>Total: {formatExpense(props.total)}</th>\n          </tr>\n        </tbody>\n      </table>\n    </>\n  );\n}\n\nexport default Table;\n","import React from 'react';\nimport './App.css';\nimport Form from \"./components/form\";\nimport Jumbotron from \"./components/jumbotron\";\nimport Table from \"./components/table\";\n\nclass App extends React.Component {\n\n  state = {\n    expenses: [],\n    amount: \"\",\n    total: 0\n  }\n\n  handleInputChange = event => {\n    this.setState({...this.state, amount: event.target.value});\n  };\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n\n    let expenseArr = this.state.expenses;\n    let floatAmount = parseFloat(this.state.amount);\n\n    expenseArr.push(floatAmount);\n    console.log(floatAmount, this.state.total);\n\n    this.setState({...this.state, expenses: expenseArr, total: this.state.total + floatAmount})\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Jumbotron/>\n        <Form handleInputChange={this.handleInputChange} handleFormSubmit={this.handleFormSubmit}/>\n        <Table expenses={this.state.expenses} total={this.state.total}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}